
'Variable Initialization and Declaration
Dim sExcelLocation, ScreenshotFolderPath
Dim sParent, sParentProp, arrParent, current_parent, arrParentProp, sControl, sControlProp, arrControlProp, sAction, sDataValue, restart, theRun, arrData, arrNum
Dim obj_hierarchy, control_object
Dim objhierarchyArr()
Dim objhierarchypropArr()
Dim browserObject
'Dim testStepStatusFlag
Dim testStepStatusFlag, testCaseStatusFlag
Dim arrNumbers()
Dim allBatchesArr(), batchCount, batchFlag, changeBatchval
Dim sendStepStatustoALM
Dim actualResult
Dim sendActualResulttoALM
Dim testStepCount
Dim objectList
Dim arrControlObject(1)
Dim SAPTableColName
Dim SAPTableColValue
Dim SAPTableRowNum
Dim consignmentNumber
Dim statusBarText
Dim ExtractedValue
Dim dynamicVal
Dim sBin
Dim product
Dim handlingUnit
Dim dBin
Dim dHU
Dim orderNo
Dim itemnametofetch 'fetching the value of this variable name in function "getvalue"
Dim deliveryNo
Dim outbDeliveryOrder
Dim woNumber
Dim inbDeliveryOrder
Dim woInboundNumber
Dim spoolNoStr, spoolNoArr, spoolNo
Dim giStatus

'******PTP Variable Declaration
Dim numberArr
Dim docOverviewDate, docOverviewStatus
Dim purchReqNo, purchReqStr, purchReqArr, purchReqVendor, purchasingOrg, purchOrderNo, inboundDelStr, inboundDelArr, inboundDelNo
Dim invoiceStr, invoiceArr, invoiceNo
Dim companyCode, referenceNumber, netPrice, perQuantityPrice, baselineDate, pmntTerms, shortCloseStr
Dim contractCreationStr, contractArr, contractNumber, sourceLoc
Dim enabledFlag
Dim siffIMStr
'******End of PTP variable declaration

Dim orderNoMeded
Dim orderNoMededIssue
Dim orderNoIssue
Dim orderNoStandard
'Dim poInboundDeliveryNo
Dim qty
Dim batch
Dim stockOverviewItem
Dim updatedreceivedOnDockQty
Dim updatedFreeStockQty
Dim pgiDoneFlag
Dim plantNumber
Dim storageBin 
Dim productNo
Dim owner
Dim batchNo
Dim documentNo
Dim updatedSykCorpAllendaleQty
Dim blockedSBin, binStockRemovalFlag
'sExcelLocation = "C:\Drive E\Automation\Project_Framework_V1\Organizer\Test_Case.xls"
'ScreenshotFolderPath = "C:\Drive E\Automation\Project_Framework_V1\Evidences"

'The below excel path for should be dynamic.
'sExcelLocation = "C:\Users\keshubm\WORK\UFT\Automation Framework\Project_Framework_V2_KS\Organizer\Test_Case.xls"
'ScreenshotFolderPath = "C:\Users\keshubm\WORK\UFT\Automation Framework\Project_Framework_V2_KS\Evidences"

Function configureExecutionSheetName(bpmScenarioName)
	
	sExcelLocation = "C:\Users\keshubm\WORK\UFT\Automation Framework\Project_Framework_V1_ALMPath\Organizer\" & bpmScenarioName & ".xls"	
	ScreenshotFolderPath = "C:\Users\keshubm\WORK\UFT\Automation Framework\Project_Framework_V1_ALMPath\Evidences"
	
End Function

'Arguments of below function should come from the 'Execution Path' column of the Organizer_New excel for execution in ALM. 
The column value should be comma separated. Example "Root\Informal Test Cycle\ STP1,Purchase Requisition,48" 
Function exec_HP_ALM (Path, CY_CYCLE,Test_Case_ID)


Dim gTDConn
Set gTDConn = CreateObject("TDApiOle80.TDConnection")
gTDConn.InitConnectionEx "http://10.50.112.78:8080/qcbin"
gTDConn.Login "kbansal", "Stryker2025"
gTDConn.Connect "Stryker", "Accelerate"

testCaseStatusFlag = 1

Set treeMgr = gTDConn.TestSetTreeManager

'Set tstTree = treeMgr.NodeByPath("Root\Automation - Demo")

Set tstTree = treeMgr.NodeByPath(Path)

Set TestSetF = tstTree.TestSetFactory
Set aFilter = TestSetF.Filter
'name of test
'CY_CYCLE
aFilter.Filter("CY_CYCLE") = CY_CYCLE
'aFilter.Filter("CY_CYCLE") = "Purchase_Requisition"
'Msgbox aFilter.Text
Set lst = TestSetF.NewList(aFilter.Text)
If lst.Count = 0 Then
Set TstSet = TestSetF.AddItem(Null)
TstSet.Field("CY_CYCLE") = CY_CYCLE
'TstSet.Field("CY_CYCLE") = "Purchase_Requisition"
TstSet.Post
Else
Set TstSet = lst.Item(1)
End If
Set testInstanceF = TstSet.TSTestFactory
Set aFilter = testInstanceF.Filter
'aFilter.Filter("TS_TEST_ID") = "48"
aFilter.Filter("TS_TEST_ID") =Test_Case_ID
'Msgbox aFilter.Text
Set lst = testInstanceF.NewList(aFilter.Text)
If lst.Count = 0 Then
'Set tstInstance = testInstanceF.AddItem("48")
Set tstInstance = testInstanceF.AddItem(Test_Case_ID)
'tstInstance.Field("TS_TEST_ID") = "48"
tstInstance.Field("TS_TEST_ID") =Test_Case_ID
Else
Set tstInstance = lst.Item(1)
End If
Set RunF = tstInstance.RunFactory
Set theRun = RunF.AddItem("MyRun")
theRun.CopyDesignSteps

End Function

Function execute_step (objControl,step_ID, testStepStatusFlag, actualResult)

'If testStepStatusFlag=1 Then
'	sendStepStatustoALM = "Passed"
'	If actualResult = "" Then
'		sendActualResulttoALM = "Step Execution successful"
'	Else
'		sendActualResulttoALM = actualResult
'	End If
'ElseIf testStepStatusFlag=0 Then
'	sendStepStatustoALM = "Failed"
'	sendActualResulttoALM = "Step Execution failed."
'Else
'	sendStepStatustoALM = "Failed"
'	sendActualResulttoALM = actualResult
'End If

If testStepStatusFlag=1 Then
    sendStepStatustoALM = "Passed"
    If actualResult = "" Then
        sendActualResulttoALM = "Step Execution successful"
    Else
        sendActualResulttoALM = actualResult
    End If
Else
    testCaseStatusFlag = 0
    sendStepStatustoALM = "Failed"
    If actualResult = "" Then
        sendActualResulttoALM = "Step Execution failed."
    Else
        sendActualResulttoALM = actualResult
    End If

End If

Set runStepF = theRun.StepFactory
Set lst = runStepF.NewList("")
testStepCount = lst.Count
'msgbox lst
'For Each Item In lst
'Test_Step_no = "1"
Set Item = lst.Item(step_ID)
Set runStep2 = Item
'Again I doubt that runStep2.Status will work

'Attachment Code
fileName = createFilenameTimeStamp(ScreenshotFolderPath)
Dim attachFactory 'As AttachmentFactory
Set attachFactory = runStep2.Attachments
Set attachment = attachFactory.AddItem (Null)
objControl.CaptureBitmap fileName,True
attachment.FileName = fileName
'attachment.Type = TDATT_FILE
attachment.Type = 1
attachment.Post
'Attachment code ends

runStep2.Field("ST_STATUS") = sendStepStatustoALM
runStep2.Field("ST_ACTUAL") = sendActualResulttoALM
runStep2.Post


If CINT(step_ID) = CINT(testStepCount) Then
	Call setTestStatus(theRun, testCaseStatusFlag)
Else
	If testCaseStatusFlag=0 Then		
		Call setTestStatus(theRun, testCaseStatusFlag)		
	ElseIf testCaseStatusFlag=1 Then		
		testCaseStatusFlag=2		
		Call setTestStatus(theRun, testCaseStatusFlag)
	End If	
End If

	
End Function

Function setTestStatus(theRun, testCaseStatusFlag)
	
	If testCaseStatusFlag=1 Then
		'msgbox "Here"
		theRun.Status = "Passed"
'		theRun.Post
		theRun.Post
		
'		If pgiDoneFlag = 1 Then
'			need to write the code that will append the excel sheet and write END , so that we can come out of the test case .
'		End If
	ElseIf testCaseStatusFlag=0 Then
		theRun.Status = "Failed"
		theRun.Post
'		ExitTest
	Else
		theRun.Status = "Not Completed"
		theRun.Post
	End If
	
End Function


'========================================
'	Function Name - fnExecuteTestCase
'	Purpose - This is just a wrapper function that calls fnReadExcel function
'========================================
Function fnExecuteTestCase(sTestCaseName)
		pgiDoneFlag = 0
		actualResult=""
		fnReadExcel(sTestCaseName)

End Function
'============= End Function ===============



'========================================
'	Function Name - fnReadExcel
'	Purpose - This function loads the excel sheet into QTP data table and stores the cell values in Global Variables
'========================================
Function fnReadExcel(sSheetName)

	 	'Add the Data Sheet into QTP Data Table
		DataTable.AddSheet("dtSheet")

		'Import the Excel Sheet into QTP Data Table
		DataTable.ImportSheet sExcelLocation, sSheetName, "dtSheet"

'		importSheetToDataTable(sSheetName)
		
		testStepCount = getTestStepCount
'		msgbox testStepCount
		'Loop through all the rows in the Data Sheet
		iRow = DataTable.GetSheet("dtSheet").GetRowCount

		For iR = 1 to iRow
				'Set the Current Row in the Data Sheet according to the loop counter
				DataTable.SetCurrentRow iR

				'Capture all the cell values in different variables
				sParent = DataTable("Parent", "dtSheet")
				sParentProp = DataTable("PProperty", "dtSheet")
				sControl = DataTable("Control", "dtSheet")
				sControlProp = DataTable("CProperty", "dtSheet")
				sAction = DataTable("Action", "dtSheet")
				sDataValue = DataTable("Data", "dtSheet")
				
				
				'Call the function that will convert the excel data into QTP readable format
				If sParent = "End" Then
						Exit For
				ElseIf sParent <> "" Then
'						returnVal = InStr(sParent, "SAP")
'						returnVal2 = InStr(sParent, "Window")
						If InStr(sParent, "SAP") <> 0 OR InStr(sParent, "Window") <> 0 Then
'							msgbox "Here"
							fnIdentifySAPParentHierarchy()
						Else
							fnIdentifyParentHierarchy()						
						End If
				Else
						'The action is independent of the all the controls (refer NOTE  2 from the article)
						fnAction()
				End If

		Next

End Function
'============= End Function ===============


'========================================
'	Function Name - fnIdentifyParentHierarchy
'	Purpose - This function converts the values in cells A and B into QTP readable format
'========================================
Function fnIdentifyParentHierarchy()

	 	'Split Parent Property so that multiple objects can be resolved
 		arrParent = Split(sParent, ",")
 		parentCount = uBound(arrParent)
 		'msgbox parentCount
 		GetBrowserCount = 0
 		restart = 0
 		ReDim objhierarchyArr(parentCount)
 		ReDim objhierarchypropArr(parentCount)
 		For i = 0 to parentCount
 			'msgbox arrParent(i)
        	'Split Parent Property so that multiple objects can be resolved
        	arrParentProp = Split(sParentProp, ",")
        	parentPropCount = uBound(arrParentProp)
        	'msgbox parentPropCount
        	
        	Set objhierarchypropArr(i) = Description.Create()
			
			For j = restart to parentPropCount
        		
        		arrParentpropKeyValue = Split(arrParentProp(j), ":=")
        		'msgbox arrParentpropKeyValue(0)
        		'msgbox arrParentpropKeyValue(1)
        		If j<>restart and arrParentpropKeyValue(0) = "micclass" then
        			restart=j
        			'msgbox "Exiting Loop"
        			Exit For
				Else
					'msgbox "In else loop"
        			objhierarchypropArr(i)(arrParentpropKeyValue(0)).value = arrParentpropKeyValue(1)
        		End If
        	Next
			'Desktop.ChildObjects(objhierarchypropArr(0)).Sync
			If i=0 Then
				wait(5)
			End If
			GetBrowserCount = Desktop.ChildObjects(objhierarchypropArr(0)).Count
			'msgbox "Browser Count is " & GetBrowserCOunt
			If i=0 Then
				'GetBrowserCount = Desktop.ChildObjects(objhierarchypropArr(i)).Count
				Set objhierarchyArr(i) = Desktop.ChildObjects(objhierarchypropArr(i))
				'msgbox GetBrowserCount
				'msgbox "Done"
				Set browserObject = objhierarchyArr(i)
			ElseIf i=1 Then 
				'msgbox "Concatenating"
'				If GetBrowserCount=0 Then
'					msgbox "add 1"
'					GetBrowserCount=1
'				End If
'				msgbox GetBrowserCount
'				msgbox "i=2"

				Set objhierarchyArr(i) = objhierarchyArr(i-1)(GetBrowserCount-1).ChildObjects(objhierarchypropArr(i))
				
			Else
				'msgbox "i>=2"
				Set objhierarchyArr(i) = objhierarchyArr(i-1)(0).ChildObjects(objhierarchypropArr(i))
				
			End If
			
			
						
		Next
        	 
		Set obj_hierarchy = objhierarchyArr(i-1)

		'Call the function that will resolve the Control Object
		fnIdentifyControl()
		

		
		
End Function
'============= End Function ===============



'========================================
'	Function Name - fnIdentifyControl
'	Purpose - This function converts the values in cells C and D into QTP readable format and then combines values from Cells A, B, C and D to come up with a single object
'========================================
Function fnIdentifyControl()


		'Split the Control Property
		If sControl <> "" Then
				arrControlProp = Split(sControlProp, ":=")
				'msgbox arrControlProp(0)
				'msgbox arrControlProp(1)
		
				'Resolve the Control object to obtain the complete heirarchy on which the action can be performed
				Set child_object = Description.Create()
				child_object("micclass").value = sControl
				child_object(arrControlProp(0)).value = arrControlProp(1)
				obj_count = child_object.Count
				'msgbox obj_count
				
				'Create the object on which the action will be performed
				Set control_object = obj_hierarchy(0).ChildObjects(child_object)
				
		Else
				'Control Object is the parent hierarchy on which the action will be performed (refer NOTE 1 from the article)
				Set control_object = obj_hierarchy
		End If

		'Call the function that will perform the necessary action on the object
		fnAction()		

End Function
'============= End Function ===============



'========================================
'	Function Name - fnAction
'	Purpose - This function performs action on the object based upon the defined keyword
'========================================
Function fnAction()

		'Perform Action on the control_object based upon the keyword defined in the excel sheet
		Select Case sAction
						
				Case "SetValue"
						arrData = dataProvider(sDataValue)
						
						If InStr(sParent, "SAP") <> 0 OR InStr(sParent, "Window") Then
							Call sendKeys(control_object, arrData)
						Else
							Call sendKeys(control_object(0), arrData)
						End If
				
				Case "SetSystemDate"		
						setSystemDate(control_object(0))		
									
				Case "SetReferenceNumber"		
						Call setReferenceNumber(control_object(0), sDataValue)

				Case "SelectMenu"
						control_object(0).Select sDataValue

				Case "Type"
						control_object(0).Type sDataValue

				Case "SelectDropDownValue"
						Call selectDropdownValue(control_object(0), sDataValue)

				Case "SelectWinListValue"
						control_object(0).Select sDataValue
						
				Case "Select_Required_Requisition"
						arrData = dataProvider(sDataValue)
						Call Select_Required_Requisition(control_object(0), arrData)

				Case "GetValue"
                        			arrData = dataProvider(sDataValue)
						If InStr(sParent, "SAP") <> 0 OR InStr(sParent, "Window") Then
							Call getValue(control_object,arrData)
						Else
							Call getValue(control_object(0),arrData)
						End If
						
				Case "SetValueDynamic"
						arrData = dataProvider(sDataValue)
						If InStr(sParent, "SAP") <> 0 OR InStr(sParent, "Window") Then
							Call setValueDynamic(control_object, arrData)
						Else
							Call setValueDynamic(control_object(0), arrData)
						End If

'				Case "Click"
'						If InStr(sParent, "SAP") <> 0 OR InStr(sParent, "Window") <> 0 Then
'							fnClick(control_object,sDataValue)
'						Else
'							fnClick(control_object(0),sDataValue)
'						End If

			'Keshub
			
				Case "GetBatchesPerMaterial"
						Call getBatchesPerMaterial(control_object, sDataValue)
			
				Case "SetValueNewBatch"
						Call setValueChangeBatch(control_object, allBatchesArr, batchNo)


			'krishan - earlier by Keshub			
				Case "SelectCell"
				
					If InStr(sParent, "SAP") <> 0 OR InStr(sParent, "Window") <> 0 Then
							Call fnSelect(control_object,sDataValue) 
					Else
							Call fnSelect(control_object(0),sDataValue)
					End If
						
				Case "Hovermouse"
						If InStr(sParent, "SAP") <> 0 OR InStr(sParent, "Window") <> 0 Then
							hovermouse(control_object)
						Else
							hovermouse(control_object(0))
						End If
				Case "Activate"
						control_object.Activate

				Case "WindowClose"
						control_object.Close

				Case "Run"
						'SystemUtil.Run "chrome.exe", sDataValue
						Run(sDataValue)
						
				Case "Maximize"		
						fnMaximize(control_object)
						
				Case "LaunchSAPLogon"
						arrData = dataProvider(sDataValue)
						launchSAPLogon(arrData)
				
				'Modified by KRISHAN - 26/12		
				Case "CloseSAPConnection"
						SAPGuiUtil.CloseConnections 
						
				Case "Sync"
						browserSync(control_object)
						
				Case "BrowserSync"
						browserSync(control_object(0))
						
				Case "Keystroke"
						keyStroke(sDataValue)
						
				Case "closeAllBrowsers"
						closeAllBrowsers
						
				' from keshub		
				Case "SelectTreeNode"
                      				Call selectTreeNode(control_object, sDataValue)
						
				Case "SelectWebCheckBox"		
						Call selectWebCheckBox(control_object(0), sDataValue)
                      
                 		'from keshub     
  				Case "ClickGUIGridButton"
                       				Call clickGUIGridButton(control_object, sDataValue)

				Case "ClickGUIToolbarButton"
                      	 			Call clickGUIToolbarButton(control_object, sDataValue)
						
				Case "WaitforObjectProperty"
						Call waitforObjectProperty(control_Object(0))
						
				Case "CheckEnabled"
						arrData = dataProvider(sDataValue)
						Call objectEnabledCheck(control_Object(0), arrData)
				
				Case "VerifyText"	
						arrData = dataProvider(sDataValue)
						If InStr(sParent, "SAP") <> 0 OR InStr(sParent, "Window") <> 0 Then
							testStepStatusFlag = verifyText(control_object, arrData)
						Else
							testStepStatusFlag = verifyText(control_object(0), arrData)
'						msgbox testCaseStatusFlag
						End If
						
				Case "ValueComparator"			
						arrData = dataProvider(sDataValue)			
						testStepStatusFlag = valueComparator(arrData)		
				
				Case "VerifyIsEmpty"		
						testStepStatusFlag = verifyIsEmpty(sDataValue)

				Case "SAPVariantSelector"
						Call variantSelector(control_object, sDataValue)
						
				Case "SelectComboBoxItem"
						Call selectbyTextfromComboBox(control_object, sDataValue)
				
				Case "SetValueRadioButton"		
						Call setValueRadio(control_object)
				
				Case "SelectMenuBarItem"
						Call selectbyTextfromMenuBar(control_Object, sDataValue)

				Case "VerifyTextInput"
						testStepStatusFlag = verifyTextInput(control_object(0), sDataValue)
						
				Case "GetPurchaseReqNumber"
						Call getPurchaseRequisitionNumber(testStepStatusFlag, control_object(0), sDataValue)
						
				Case "FetchConsignmentNumber"
						Call fetchConsignmentNumber(control_object, sDataValue)
						
				Case "GetStatusBartext"
						Call getSTatusBartext(control_object, sDataValue)
						
			
                         	Case "GetTextFromTree"
                				arrData = dataProvider(sDataValue)
                        			Call gettextfromMultiColumnTree(control_object, arrData)
		
				Case "exec_HP_ALM"
				
						arrData = Split(sDataValue, ",")
						CY_Cycle = arrData(0)
						Test_Case_ID = arrData(1)
						'msgbox Test_Case_ID
						'msgbox Test_Step_no
						exec_HP_ALM CY_Cycle,Test_Case_ID
						
											
				Case "execute_step"
						
						'arrData = Split(sDataValue, ",")
						'CY_Cycle = arrData(0)
						Test_Step = sDataValue
						'executestepArr = dataProvider(sDataValue)
						'msgbox Test_Case_ID
						'msgbox Test_Step_no
						If InStr(sParent, "SAP") <> 0 OR InStr(sParent, "Window") <> 0 Then		
								Call execute_step(control_object,Test_Step, testStepStatusFlag, actualResult)		
						Else		
								Call execute_step(control_object(0),Test_Step, testStepStatusFlag, actualResult)

				Case "SendKeys"
						'This function uses SendKeys method to select value from the Menu
						Set WshShell = CreateObject("WScript.Shell")

						Select Case sDataValue
								Case "Alt F+N"
									WshShell.SendKeys "%(fn)"
								Case "Alt F+O"
									WshShell.SendKeys "%(fo)"
						End Select
						
						Set WshShell = Nothing
						
				Case "Update Value"
						updateValue(sDataValue)
						
				Case "DoubleClick"		
						doubleClick(control_object(0))
						
				End Select
				
				
				
				
				
End Function

Function Run(appURL)

	returnVal = InStr(appURL, "https")
	If returnVal <> 0 Then
		SystemUtil.Run "chrome.exe", sDataValue
	Else
		SystemUtil.Run sDataValue
	End If
	
	wait(20)
	
End Function

Function fnMaximize(objControl)		
	objControl.Maximize			
End Function

Function fnClick(objControl,strValue)
	If waitforElementTimeOut(objControl,20) Then
		If Len(strValue) = 0 Then
			objControl.Click
		Else
			msgbox strValue
			objControl.Select strValue
		End If
	else
		Print "Control Not Available"
	End If
 
End Function
'Function sendKeys(objControl, strValue)
'
'	If waitforObjectProperty(objControl)=1 Then
'		objControl.Set strValue
'		sendKeys=1
'	Else
'		actualResult = "Object Not found after waiting for 25 seconds."
'		sendKeys=0
'	End If
'	
'End Function

'krishan- 28.12.2017 
'Function sendKeys(objControl, strValue)
'
'	If waitforElementTimeOut(objControl,20) Then
'		If sControl = "GuiTableControl" Then
'			arrData = Split(strValue, ",")
'			SAPTableRowNum = arrData(0)
'			SAPTableColName = arrData(1)
'			SAPTableColValue = arrData(2)
'			msgbox SAPTableColValue
'			Call objControl.SetCellData(SAPTableRowNum,SAPTableColName,SAPTableColValue)
'
'		Else 
'			objControl.Set strValue
'		End If
'		
''		objControl.CaptureBitmap "C:\Users\keshubm\WORK\UFT\Project_Framework\Evidences\New_Evidence1.png", True
'	Else
'		Print "Control Not Available"
'	End If
'	
'End Function

Function sendKeys(objControl, arrData)

	If waitforElementTimeOut(objControl,20) Then
		If sControl = "GuiTableControl" Then
		
			SAPTableRowNum = arrData(0)
			SAPTableColName = arrData(1)
			SAPTableColValue = arrData(2)
			'msgbox SAPTableColValue
			Call objControl.SetCellData(SAPTableRowNum,SAPTableColName,SAPTableColValue)

		Else 
			strValue = arrData(0)
			objControl.Set strValue
		End If
	Else
		Print "Control Not Available"
	End If
End Function


Function selectTreeNode(objControl, selectionString)
    objControl.Expand selectionString
    objControl.ActivateNode selectionString
End Function


'krishan 04/01
Function fnSelect(objcontrol,strValue)
	
	If waitforElementTimeOut(objControl,20) Then
		If sControl = "GuiTableControl" OR sControl = "GuiShell" Then
			arrData = Split(strValue, ",")
			SAPTableRowNum = arrData(0)
			SAPTableColName = arrData(1)
			Call objControl.SelectCell(SAPTableRowNum,SAPTableColName)
			objcontrol.PressEnter
		End If
	Else
		Print "Control not found."
	End If
End Function

'Krishan
Function fnGUiTableControlClick(objControl,Strvalue)
If waitforElementTimeOut(objControl,20) Then
	objControl.Select Strvalue
Else 
	Print "Control Not Available"
End If
	End Function

Function waitforElementTimeOut(objControl,timeToWaitFor)
	If objControl.Exist(timeToWaitFor) Then
		waitforElementTimeOut = 1
	Else
		waitforElementTimeOut = 0	
	End If
End Function

Function selectDropdownValue(objControl, strValue)
	If waitforElementTimeOut(objControl,20) Then
		'objControl.Select strValue
'		msgbox "In dropdown function"
		rCount=objControl.RowCount
'		msgBox rCount
		If func_selectWebTablObject(objControl, rCount, strValue) then
'			msgBox "Selection Successful"
		
		Else
'			msgBox "Error in selecting dropdown value"
		End If
'		For r=1 to rCount
'			cCount=objControl.ColumnCount(r)
'			
'			For c=1 to cCount
'				oCount=objControl.ChildItemCount(r,c,"WebEdit")
'			
'				For obj=0 to oCount-1
' 					set cObject=objControl.ChildItem(r,c,"WebEdit",obj)
' 					msgbox cObject.getROproperty("value")
' 					cellData = cObject.getROproperty("value")
' 					
' 					If cellData = strValue Then
' 						fnClick(cObject)
' 					End If
' 					
' 					Exit For
' 				Next 
'			Next
'		Next
	Else
		Print "Control Not Available"
	End If
	
End Function

Function func_selectWebTablObject(objControl, rCount, strValue)
	For r=1 to rCount
		cCount=objControl.ColumnCount(r)
			
		For c=1 to cCount
			oCount=objControl.ChildItemCount(r,c,"WebEdit")
			
			For obj=0 to oCount-1
 				set cObject=objControl.ChildItem(r,c,"WebEdit",obj)
 				'msgbox cObject.getROproperty("value")
' 				cellData = cObject.getROproperty("value")
' 					
' 				If cellData = strValue Then
' 					fnClick(cObject)
' 					func_selectWebTablObject=1
' 				End If
' 					
 			Next
 		Next
	Next
	
'	func_selectWebTablObject=0
	
End Function

Function Select_Required_Requisition(objControl, arrData)
	Dim mySendKeys
	set mySendKeys = CreateObject("WScript.shell")
	navArg = arrData(0)
	offsetfromDefaultindex = arrData(1)
	navStr = "{" & navArg & "}"
	For index = 1 To offsetfromDefaultindex 
		mySendKeys.SendKeys(navStr)
	Next
	mySendKeys.SendKeys("{ENTER}")
'	wait 5
End Function

Function getValue(objControl, arrData) 

	

	If sControl = "GuiShell" Or sControl = "GuiTableControl" Then
			
			SAPTableRowNum = arrData(0)
			SAPTableColName = arrData(1)
			itemnametofetch = arrData(2)
			ExtractedValue =  objControl.GetCellData(SAPTableRowNum,SAPTableColName)
			
			If itemnametofetch = "Order NO" Then
				orderNo = ExtractedValue
			ElseIf itemnametofetch = "Outb. Delivery Order" Then
				outbDeliveryOrder = ExtractedValue
			ElseIf itemnametofetch = "inbound Delivery Order" Then
				outbDeliveryOrder = ExtractedValue
			ElseIf itemnametofetch = "WO Number" Then
				woNumber = ExtractedValue	
			ElseIf itemnametofetch = "Spool NO" Then
                spoolNoStr = ExtractedValue    
                'msgbox spoolNoStr
                spoolNoArr = getNumbersFromString(spoolNoStr)
                spoolNo = spoolNoArr(0)    
                'msgbox spoolNo    
			ElseIf itemnametofetch = "GI Status" Then
                giStatus = ExtractedValue
            ElseIf itemnametofetch = "Plant No" Then
				plantNumber = ExtractedValue
            ElseIf itemnametofetch = "ProductNo" Then
				productNo = ExtractedValue
			ElseIf itemnametofetch = "Owner" Then
				owner = ExtractedValue
			ElseIf itemnametofetch = "Storage Bin" Then
				storageBin = ExtractedValue
			ElseIf itemnametofetch = "BatchNo" Then
				batchNo = ExtractedValue
			ElseIf itemnametofetch = "Stock Removal Flag" Then
				binStockRemovalFlag = ExtractedValue
				'msgbox batchNo

			End If
			
	Else
		propertyName = arrData(0)
		itemnametofetch = arrData(1)
		ExtractedValue = objControl.GetROProperty(propertyName)
		If itemnametofetch = "SBin" Then
			sBin = ExtractedValue
		ElseIf itemnametofetch = "Product" Then
			product = ExtractedValue
		ElseIf itemnametofetch = "HandlingUnit" Then
			handlingUnit = ExtractedValue
		ElseIf itemnametofetch = "DBin" Then
			dBin = ExtractedValue
		ElseIf itemnametofetch = "DHU" Then
			dHU = ExtractedValue
		ElseIf itemnametofetch = "Order NO" Then
			orderNo = ExtractedValue
		ElseIf itemnametofetch = "Order NO Issue" Then
			orderNoIssue = ExtractedValue
		ElseIf itemnametofetch = "Order NO Standard" Then
			orderNoStandard = ExtractedValue
		ElseIf itemnametofetch = "Delivery NO" Then
			deliveryNo = ExtractedValue
		ElseIf itemnametofetch = "PR NO" Then
			purchReqStr = ExtractedValue
			purchReqArr = getNumbersFromString(purchReqStr)
			purchReqNo = purchReqArr(0)
			'msgbox purchReqNo
		ElseIf itemnametofetch = "INBOUNDDEL NO" Then	
			inboundDelStr = ExtractedValue	
			inboundDelArr = getNumbersFromString(inboundDelStr)
			inboundDelNo = inboundDelArr(0)	
			'msgbox inboundDelNo
		ElseIf itemnametofetch = "Purch Request Vendor" Then	
			purchReqVendor = ExtractedValue
		ElseIf itemnametofetch = "Purchasing Org" Then	
			purchasingOrg = ExtractedValue
		ElseIf itemnametofetch = "Company Code" Then	
			companyCode = ExtractedValue
		ElseIf itemnametofetch = "PO NO" Then	
			purchOrderNo = ExtractedValue
			'msgbox purchOrderNo
		ElseIf itemnametofetch = "Net Price" Then
			netPrice = ExtractedValue
'			msgbox netPrice		
		ElseIf itemnametofetch = "Baseline Date" Then
			baselineDate = ExtractedValue
'			msgbox baselineDate
		ElseIf itemnametofetch = "Payment Terms" Then
			pmntTerms = ExtractedValue
'			msgbox pmntTerms
		ElseIf itemnametofetch = "Invoice NO" Then
			invoiceStr = ExtractedValue
			invoiceArr = getNumbersFromString(invoiceStr)
			invoiceNo = inboundDelArr(0)
'			msgbox invoiceNo
		ElseIf itemnametofetch = "Short Close PO" Then
			shortCloseStr = ExtractedValue
'			msgbox shortCloseStr		
		ElseIf itemnametofetch = "Contract NO" Then
			contractCreationStr = ExtractedValue
			contractArr = getNumbersFromString(contractCreationStr)	
			contractNumber = contractArr(0)
		ElseIf itemnametofetch = "IM" Then
			siffIMStr = ExtractedValue
		ElseIf itemnametofetch = "Source Location" Then
			sourceLoc = ExtractedValue
		ElseIf itemnametofetch = "Warehouse Order_inbound" Then
			woInboundNumber = ExtractedValue
		ElseIf itemnametofetch = "Order NO Meded" Then
			orderNoMeded = ExtractedValue
		ElseIf itemnametofetch = "Order NO Meded Issue" Then
			orderNoMededIssue = ExtractedValue
'		ElseIf itemnametofetch = "PO Inbound Delivery NO" Then
'			poInboundDeliveryNo = ExtractedValue
		ElseIf itemnametofetch = "Qty" Then
			qty = ExtractedValue
		ElseIf itemnametofetch = "Batch" Then
			batch = ExtractedValue
		ElseIf itemnametofetch = "DocumentNo" Then
			documentNo = ExtractedValue
		ElseIf itemnametofetch = "BatchNo" Then
			batchNo = ExtractedValue
		ElseIf itemnametofetch = "Blocked Source Bin" Then
			blockedSBin = ExtractedValue
		End If
		
	End If
End Function

'Function setValueDynamic(objControl, strValue)
'	
'	
'	If strValue = "SBin" Then
'		dynamicVal = sBin
'	ElseIf strValue = "Product" Then
'		dynamicVal = product
'	ElseIf strValue = "HandlingUnit" Then
'		dynamicVal = handlingUnit
'	ElseIf strValue = "DBin" Then
'		dynamicVal = dBin
'	ElseIf strValue = "DHU" Then
'		dynamicVal = dHU
'	ElseIf strValue = "Order NO" Then
'		dynamicVal = orderNo
'	ElseIf strValue = "Order NO Issue" Then
'		dynamicVal = orderNoIssue
'	ElseIf strValue = "Order NO Standard" Then
'		dynamicVal = orderNoStandard
'	ElseIf strValue = "Delivery NO" Then
'		dynamicVal = deliveryNo
'	ElseIf strValue = "Outb. Delivery Order" Then
'		dynamicVal = outbDeliveryOrder
'	ElseIf strValue = "inbound Delivery Order" Then
'		dynamicVal = inbDeliveryOrder
'	ElseIf strValue = "WO Number" Then
'		dynamicVal = woNumber
'	ElseIf strValue = "Warehouse Order_inbound" Then
'		dynamicVal = woInboundNumber
'	ElseIf strValue = "Spool NO" Then
'        dynamicVal = spoolNo
'    ElseIf strValue = "Order NO Meded" Then
'        dynamicVal = orderNoMeded
'	ElseIf strValue = "Order NO Meded Issue" Then
'        dynamicVal = orderNoMededIssue
''    ElseIf strValue = "PO Inbound Delivery NO" Then
''        dynamicVal = poInboundDeliveryNo
'    ElseIf strValue = "Qty" Then
'		dynamicVal = qty
'	ElseIf strValue = "Batch" Then
'		dynamicVal = batch
'		
'	End If
'	'msgbox dynamicVal
'	Call sendKeys(objControl, dynamicVal)
'	
'End Function


Function setValueDynamic(objControl, arrData)
	count=ubound(arrData)+1
	If count = 1 Then
		strValue = arrData(0)
	ElseIf count = 3 Then
		strValue = arrData(2)
	End If
	
	
	If strValue = "SBin" Then
		dynamicVal = sBin
	ElseIf strValue = "Product" Then
		dynamicVal = product
	ElseIf strValue = "HandlingUnit" Then
		dynamicVal = handlingUnit
	ElseIf strValue = "DBin" Then
		dynamicVal = dBin
	ElseIf strValue = "DHU" Then
		dynamicVal = dHU
	ElseIf strValue = "Order NO" Then
		dynamicVal = orderNo
	ElseIf strValue = "Order NO Issue" Then
		dynamicVal = orderNoIssue
	ElseIf strValue = "Order NO Standard" Then
		dynamicVal = orderNoStandard
	ElseIf strValue = "Delivery NO" Then
		dynamicVal = deliveryNo
	ElseIf strValue = "Outb. Delivery Order" Then
		dynamicVal = outbDeliveryOrder
	ElseIf strValue = "inbound Delivery Order" Then
		dynamicVal = inbDeliveryOrder
	ElseIf strValue = "WO Number" Then
		dynamicVal = woNumber
	ElseIf strValue = "Warehouse Order_inbound" Then
		dynamicVal = woInboundNumber
	ElseIf strValue = "Spool NO" Then
        	dynamicVal = spoolNo
	ElseIf strValue = "PR NO" Then
		dynamicVal = purchReqNo
'		msgbox "Setting Purchase Requisition NO"
	ElseIf strValue = "INBOUNDDEL NO" Then
		dynamicVal = inboundDelNo
'		msgbox "Setting Inbound Delivery NO"
	ElseIf strValue = "PO NO" Then
		dynamicVal = purchOrderNo
'		msgbox "Setting Purchase Order NO"
	ElseIf strValue = "Purch Request Vendor" Then
		dynamicVal = purchReqVendor
'		msgbox "Setting Vendor"
	ElseIf strValue = "Company Code" Then
		dynamicVal = companyCode
	ElseIf strValue = "Purchasing Org" Then
		dynamicVal = purchasingOrg
'		msgbox "Setting Purchasing Org"
	ElseIf strValue = "Net Price" Then
		dynamicVal = netPrice
'		msgbox "Setting Net Price"
	ElseIf strValue = "Per Quantity Price" Then
		dynamicVal = perQuantityPrice
'		msgbox "Setting Per Quantity Price"
	ElseIf strValue = "Contract NO" Then
		dynamicVal = contractNumber
'		msgbox "Setting Per Quantity Price"
	ElseIf strValue = "Order NO Meded" Then
        dynamicVal = orderNoMeded
	ElseIf strValue = "Order NO Meded Issue" Then
        dynamicVal = orderNoMededIssue
'    ElseIf strValue = "PO Inbound Delivery NO" Then
'        dynamicVal = poInboundDeliveryNo
    	ElseIf strValue = "Qty" Then
		dynamicVal = qty
	ElseIf strValue = "Batch" Then
		dynamicVal = batch
	ElseIf strValue = "Plant No" Then
		dynamicVal = plantNumber
	ElseIf strValue = "ProductNo" Then
		dynamicVal = productNo
	ElseIf strValue = "Owner" Then
		dynamicVal = owner
	ElseIf strValue = "Storage Bin" Then
		dynamicVal = storageBin
	ElseIf strValue = "BatchNo" Then
		dynamicVal = batchNo
	ElseIf strValue = "DocumentNo" Then
		dynamicVal = documentNo
	ElseIf strValue = "Blocked Source Bin" Then
		dynamicVal = blockedSBin	
	End If
	'msgbox dynamicVal
	
	If count = 1 Then
		arrData(0) = dynamicVal
		Call sendKeys(objControl, arrData)
	ElseIf count = 3 Then
		arrData(2) = dynamicVal
		Call sendKeys(objControl, arrData)
	End If
'	Call sendKeys(objControl, dynamicVal)
	
End Function

Function GeneralVerify(ByVal observed, ByVal operator, ByVal expected)
    Dim iStatus, sCondition    
    Select Case True        
        Case IsObject(observed), IsObject(expected)
            sCondition = "Cannot evaluate expression " & typename(observed) & operator & typename(expected) & "." & _
                            vbNewLine & "General Verify does not support objects."
            iStatus = 3 'micWarning
        Case Else
            sCondition = """" & observed & """" & operator & """" & expected & """"    
            Select Case True
                Case eval(sCondition)
                    iStatus = 0 'micPass
                Case Else
                    iStatus = 1 'micFail
            End Select
    End Select    
    Reporter.ReportEvent iStatus, "GeneralVerify", sCondition
    GeneralVerify = iStatus
End Function

Function browserSync(objControl)
	getBrowserCount = objControl.Count
'	msgBox "Browser Count is " & getBrowserCount
	objControl(getBrowserCount-1).Sync
	wait(5)
End Function

Function keyStroke(strValue)
	Dim mySendKeys
	set mySendKeys = CreateObject("WScript.shell")
	If strValue = "UP" Then
		mySendKeys.SendKeys("{UP}")
	ElseIf strValue = "DOWN" Then
		mySendKeys.SendKeys("{DOWN}")
	ElseIf strValue = "LEFT" Then
		mySendKeys.SendKeys("{LEFT}")
	ElseIf strValue = "RIGHT" Then
		mySendKeys.SendKeys("{RIGHT}")
	ElseIf strValue = "ENTER" Then
		mySendKeys.SendKeys("{ENTER}")
	End If
	
End Function

Function getCount

	Set BrowserObj = Description.Create
	BrowserObj("micclass").Value = "Browser"
	Set Obj = Desktop.ChildObjects(BrowserObj)
	getCount = Obj.Count
	
End Function

Function closeAllBrowsers

	count = getCount
	For i = count-1 To 0 Step -1
		Browser("CreationTime:=0").Close
	Next
	
End Function

Function waitforObjectProperty(objControl)
	
	iterator=10
	For i = 1 To iterator
		If objControl.WaitProperty("visible",-1,5000) Then
			msgbox "Here"
			waitforObjectProperty=1
			Exit For
		Else
			waitforObjectProperty=0
		End If
	Next
	
End Function

Function dataProvider
	arrData = Split(sDataValue, ",")
	dataprovider = arrData
End Function

'Function verifyText(objControl, arrData)
'
'	PropertyName = arrData(0)
''	msgBox PropertyName
'	ExpectedStr = arrData(1)
''	msgBox ExpectedStr
'
'	If waitforObjectProperty(objControl) = 1 Then
'		ActualStr = objControl.GetROProperty(PropertyName)
'		
'	    If ActualStr = ExpectedStr	Then
'			verifyText = 1
'			actualResult = ExpectedStr & " found successfully."
'		Else
'			verifyText = 0
'		End If
'	Else
'		actualResult = "Object Not found after waiting for 25 seconds."
'		verifyText = -1
'	End if
'	
'End Function
 
' Function verifyText(objControl, arrData)
'	Dim fileName
'	PropertyName = arrData(0)
''	msgBox PropertyName
'	ExpectedStr = arrData(1)
''	msgBox ExpectedStr
'
'	ActualStr = objControl.GetROProperty(PropertyName)
'	
'		
'	If ActualStr = ExpectedStr OR InStr(ActualStr , ExpectedStr) Then
''		Call QC_AttachScreenshots(ScreenshotFolderPath)
'
'		actualResult = ActualStr & " found successfully."
'		verifyText = 1
'	Else
''		Call QC_AttachScreenshots(ScreenshotFolderPath)
'	
'		actualResult = "Actual Result = " & ActualStr & ".Expected Result = " & ExpectedStr & " not found"
'		verifyText = 0
'	End If
'	
'End Function

Function verifyText(objControl, arrData)
	Dim fileName
	PropertyName = arrData(0)
'	msgBox PropertyName
	ExpectedStr = arrData(1)
'	msgBox ExpectedStr

	ActualStr = objControl.GetROProperty(PropertyName)
	
'	'by Krishan 
'	If ExpectedStr = "No deliveries selected"Then
'	
'		If ActualStr = ExpectedStr OR InStr(ActualStr , ExpectedStr) Then
''		Call QC_AttachScreenshots(ScreenshotFolderPath)
'
'		actualResult = ActualStr & " found successfully."
'		
'		Else 
'		actualResult = "Deleveries are there to be selected"
'		
'		End If
'		verifyText = 1
'	End If
		
	If ActualStr = ExpectedStr OR InStr(ActualStr , ExpectedStr) Then
'		Call QC_AttachScreenshots(ScreenshotFolderPath)

		
		If ExpectedStr = "No deliveries selected" Then
			actualResult =  "PGI already done  by background job for all the deliveries. Hence not executing below steps." & ActualStr & " found successfully."
			pgiDoneFlag = 1
		Else
			actualResult =  ActualStr & " found successfully."
		End If
		
		verifyText = 1
		
	Else
'		Call QC_AttachScreenshots(ScreenshotFolderPath)
		
		If ExpectedStr = "No deliveries selected" Then
		
			actualResult = "Deleveries are there to be selected"
			verifyText = 1
			
		Else
		
			actualResult = "Actual Result = " & ActualStr & ".Expected Result = " & ExpectedStr & " not found"
			verifyText = 0		
		
		End If
		
	End If
	
End Function

Function getNumbersFromString(textStr)
	j=0			'starting index for Numbers array.
'	msgbox "Getting Numbers"
	splitStr = Split(textStr, " ")
	intCount = UBound(splitStr)
'	intCount = Cint(intCount)
	For i  = 0 To intCount 
		If IsNumeric(splitStr(i)) Then
			ReDim preserve arrNumbers(j)
			arrNumbers(j) = splitStr(i)
'			msgbox arrNumbers(j)
			j = j + 1
		End If
	Next
	
	getNumbersFromString = arrNumbers
End Function

Function getPurchaseRequisitionNumber(testStepStatusFlag, objControl, PropertyName)
	If testStepStatusFlag = 1 Then
		actualStr = objControl.GetROProperty(PropertyName)
		
		arrNum = getNumbersFromString(actualStr)
		purchaseReqNumber = arrNum(0)
		actualResult = purchaseReqNumber & " Created successfully."
		'msgbox purchaseReqNumber & " Created successfully."
		
	Else
		'msgbox "String matching unsuccessful. Test Case failed."
	End If	
End Function

Function verifyTextInput(objControl, PropertyName)
	textVal = objControl.GetROProperty(PropertyName)
	If textVal = "" Then
		verifyTextInput = 0
	Else
		verifyTextInput = 1
		actualResult = textVal & " entered successfully."
	End If
	'msgbox "Here"
	Call QC_AttachScreenshots(objControl, ScreenshotFolderPath)
	
End Function

Function importSheetToDataTable(sSheetName)

	'Add the Data Sheet into QTP Data Table
		DataTable.AddSheet("dtSheet")

		'Import the Excel Sheet into QTP Data Table
		DataTable.ImportSheet sExcelLocation, sSheetName, "dtSheet"
	
End Function

'Function getTestStepCount
'
'	rowCount = DataTable.GetSheet("dtSheet").GetRowCount 
'	stepCount=0
'	For i = 1 to rowCount
'			'Set the Current Row in the Data Sheet according to the loop counter
'			DataTable.SetCurrentRow i
'
'			'Capture all the cell values in different variables
'				
'			sAction = DataTable("Action", "dtSheet")
'			If sAction = "execute_step" Then
'				stepCount = stepCount+1
'			End If
'				
'	Next
'	
'	getTestStepCount = stepCount
'End Function


'Function QC_AttachScreenshots (strScreenshotsFolder)
'    Dim objFSO,  objFolderName, objfileList, objFile
'
'    Set objFSO = CreateObject("Scripting.FileSystemObject")
'    Set objFolderName = objFSO.GetFolder(strScreenshotsFolder)
'    Set objfileList = objFolderName.Files
'    For each objFile in objfileList
'        Call QC_AttachFileToTestRun(objFile.Path)
'    Next
'       'objFSO.DeleteFolder(Environment.Value("strResPath
'    Set objFSO = Nothing
'    Set objFolderName = Nothing
'    Set objfileList = Nothing
'End Function

'Function QC_AttachScreenshots(Filename, FolderPath)
'	
'	msgbox fileName
'	obj_hierarchy.CaptureBitmap fileName,True
''	QC_AttachFileToTestRun(fileName)
'	
'End Function

'Function QC_AttachFileToTestRun(strFilePath)
'    Dim objQCAttachments, objQCAttachments_Item
'    Set objQCAttachments =  QCUtil.CurrentR.Attachments
'    Set objQCAttachments_Item = objQCAttachments.AddItem(Null)
'    objQCAttachments_Item.FileName = strFilePath
'    objQCAttachments_Item.Type = 1
'    objQCAttachments_Item.Post
'    Set objQCAttachments = Nothing
'    Set objQCAttachments_Item = Nothing
'
'	
'End Function

Function createFilenameTimeStamp(FolderPath)

	Dim WshShell
	Dim strSafeDate, strSafeTime, strDateTime, strFileName
	Set WshShell = CreateObject("WScript.Shell")
	strSafeDate = DatePart("yyyy",Date) & Right("0" & DatePart("m",Date), 2) & Right("0" & DatePart("d",Date), 2)
	strSafeTime = Right("0" & Hour(Now), 2) & Right("0" & Minute(Now), 2) & Right("0" & Second(Now), 2)
	'Set strDateTime equal to a string representation of the current date and time, for use as part of a valid Windows filename
	strDateTime = strSafeDate & "-" & strSafeTime
	'Assemble the path and filename
	strFileName = FolderPath & "\" & strDateTime & ".png"
		
	createFilenameTimeStamp = strFileName

End Function

Function fnIdentifySAPParentHierarchy()
	
	'Split Parent Property so that multiple objects casn be resolved
		arrParentProp = Split(sParentProp, ",")
		parentPropCount = uBound(arrParentProp)
		'Resolve the hierarchy of all the objects that are parent to the actual control
		Select Case sParent

				Case "SAPGuiSession"
						Set obj_hierarchy = SAPGuiSession(arrParentProp(0),arrParentProp(1))
						
				Case "SAPGuiSession,SAPGuiWindow"
						Set obj_hierarchy = SAPGuiSession(arrParentProp(0)).SAPGuiWindow(arrParentProp(1),arrParentProp(2))
'						msgbox obj_hierarchy.GetROProperty("text")
				Case "Window"
						Set obj_hierarchy = Window(arrParentProp(0))
	
		End Select

		'Call the function that will resolve the Control Object
		fnIdentifySAPControl()
	
End Function

Function fnIdentifySAPControl()

		Dim actualPropertyValue
		'Split the Control Property
		If sControl <> "" Then
				
				arrControlProp = Split(sControlProp, ":=")
				PropertyName =  arrControlProp(0)
			    PropertyValue =  arrControlProp(1)
'		
'				'Resolve the Control object to obtain the complete heirarchy on which the action can be performed
'				Set child_object = Description.Create()
'				child_object("micclass").value = sControl
'				child_object(arrControlProp(0)).value = arrControlProp(1)
'				obj_count = child_object.Count
'				msgbox obj_count
'				
'				'Create the object on which the action will be performed
'				Set control_object = obj_hierarchy(0).ChildObjects(child_object)

				Set objectList = obj_hierarchy.ChildObjects
'				msgbox objectList.Count
				For i = 0 To objectList.Count-1
					If objectList.Item(i).Object.Type = sControl Then
						'msgbox objectList.Item(i).GetROProperty("micclass")
						actualPropertyValue = objectList.Item(i).GetROProperty(PropertyName)
						'msgbox actualPropertyValue
						If actualPropertyValue = PropertyValue Then
							'msgbox actualPropertyValue
'							msgbox objectList.Item(i).GetROProperty("micclass")
'							msgbox "Here in sapcontrol loop."
							Set control_object = objectList.Item(i)
							Exit For
						End If
					End If
				Next
				
'				Set control_object = arrControlObject
				
		Else
				'Control Object is the parent hierarchy on which the action will be performed (refer NOTE 1 from the article)
				Set control_object = obj_hierarchy
		End If

		'Call the function that will perform the necessary action on the object
		fnAction()		

End Function


' Hover mouse over any object
Function hovermouse(objControl)

	objControl.FireEvent "onmouseover"
	Wait(3)

End Function

Function launchSAPLogon(arrData)
	
	Dim Servername,Client,Username,Password,Language
	Servername = arrData(0)
	Client = 900
	Username = arrData(1)
	Password = arrData(2)
	Language = "EN"
	
	Call SAPGuiUtil.AutoLogon(Servername, Client, Username, Password, Language)
	
End Function
'krishan 03/01
Function fetchConsignmentNumber(objControl, strValue)
	
		If sControl = "GuiShell" Then
			arrData = Split(strValue, ",")
			SAPTableRowNum = arrData(0)
			SAPTableColName = arrData(1)
			consignmentNumber =  objControl.GetCellData(SAPTableRowNum,SAPTableColName)
		Else
			consignmentNumber = objControl.GetROProperty(strValue)
		End If
	'msgbox consignmentNumber
	
End Function

Function variantSelector(objControl, strValue)

	Dim colName, cellContent
	arrData = Split(strValue, ",")
	colName = arrData(0)
	cellContent = arrData(1)
	SAPTableRowNum = objControl.FindRowByCellContent(colName, cellContent)
	objControl.SelectRow(SAPTableRowNum)
	'objControl.PressEnter
'	SAPGuiSession("Session").SAPGuiWindow("Create deliveries in bckgr.pr.").SAPGuiToolbar("GridToolbar").PressButton "IMMSTART"	
End Function

Function clickGUIGridButton(objControl, buttontext)
'	Set objToolbar = SAPGuiSession("micclass:=SAPGuiSession","systemname:=EMQ").SAPGuiWindow("micclass:=SAPGuiWindow","text:=Warehouse Management Monitor SAP - Warehouse Number KZ01").SAPGuiToolbar("title:=Outbound Delivery Order")
	maxIndex = objControl.Object.ToolbarButtonCount 
'	msgbox maxIndex
	For i = 0 To maxIndex-1
   		If buttontext = objControl.Object.GetToolbarButtonTooltip(i) then
       		strButtonID = objControl.Object.GetToolbarButtonId(i) 
       		'msgbox strButtonID
       		objControl.Object.Presstoolbarbutton strButtonID
       		Exit For
   		End if
	Next
End Function

Function clickGUIToolbarButton(objControl, buttontext)
'	Set objToolbar = SAPGuiSession("micclass:=SAPGuiSession","systemname:=EMQ").SAPGuiWindow("micclass:=SAPGuiWindow","text:=Warehouse Management Monitor SAP - Warehouse Number KZ01").SAPGuiToolbar("title:=Outbound Delivery Order")
	maxIndex = objControl.Object.ButtonCount 
'	msgbox maxIndex
	'tooltip =  objToolbar.Object.GetButtonTooltip(i)
	For i = 0 To maxIndex-1
   		If buttontext = objControl.Object.GetButtonTooltip(i) then
       		buttonID = objControl.Object.GetButtonId(i)
			objControl.PressButton buttonID
       		Exit For
   		End if
	Next
End Function



'krishan 03/01
Function selectbyTextfromComboBox(objControl, selectionString)
	If 	waitforElementTimeOut(objControl,20) Then
		'msgbox objControl.GetROProperty("micclass")
		If selectionString = " " Then
			objControl.SelectKey(selectionString)
		Else
		objControl.Select selectionString
		End If
	Else
		Print "Control Not Available"
	End If
	End Function

Function selectbyTextfromMenuBar(objControl, selectionString)
	objControl.Select selectionString
End Function

Function getSTatusBartext(objControl, propertyName)
	statusBarText = objControl.GetROProperty(propertyName)
End Function



Function verifyIsEmpty(strValue)
    
    If strValue = "Spool NO" Then
        If IsEmpty(spoolNo) Then
            actualResult = "Print packing successful. Spool No = " & spoolNo
            verifyIsEmpty = 0
        Else
            actualResult = "Print Packing failed. Spool Number is not generated."
            verifyIsEmpty = 1
        End If
    End If
    
End Function

'Function valueComparator(arrData)
'    variableName = arrData(0)
''    msgBox variablename
'    expectedStr = arrData(1)
''    msgBox expectedStr
'       
'    If variableName = "GI Status" Then
'       actualResult = "Goods Issue Status = " & giStatus
'		actualResult =giStatus
'    If giStatus = expectedStr Then
'            valueComparator = 1
'        Else
'            valueComparator = 0
'        End If
'    End If
'    
'End Function

'updated function from Keshub
Function valueComparator(arrData)
	
	count=ubound(arrData)+1
	
	variableName = arrData(0)
    'msgBox variablename
	
	If count = 2 Then
		expectedStr = arrData(1)
    '	msgBox expectedStr

	End If
        
    If variableName = "GI Status" Then
        actualResult = "Goods Issue Status = " & giStatus
        'msgbox actualResult
        If giStatus = expectedStr Then
            valueComparator = 1
        Else
            valueComparator = 0
        End If
    ElseIf variableName = "Doc Overview Status" Then
        actualResult = "Goods Issue Status = " & docOverviewStatus
        
        If docOverviewStatus = expectedStr Then
            valueComparator = 1
        Else
            valueComparator = 0
        End If
     ElseIf variableName = "Received On Dock" Then

'        actualResult = "Goods Issue Status = " & docOverviewStatus
        If CInt(stockOverviewItem) = CInt(updatedreceivedOnDockQty) Then
        	actualResult = "Updated Received on Dock Quantity = " & stockOverviewItem
            valueComparator = 1
            
        Else
        	actualResult = "Received on Dock Quantity = " & stockOverviewItem
            valueComparator = 0
            
        End If
     
     ElseIf variableName = "Free Stock" Then

'        actualResult = "Goods Issue Status = " & docOverviewStatus
        If CInt(stockOverviewItem) = CInt(updatedFreeStockQty) Then
        
        	actualResult = "Updated Free Stock Quantity = " & stockOverviewItem
            valueComparator = 1
            
        Else
        	actualResult = "Free Stock Quantity = " & stockOverviewItem
            valueComparator = 0
                                     
        End If
     
     ElseIf variableName = "SYK Corp Allendale" Then

'        actualResult = "Goods Issue Status = " & docOverviewStatus
        If CLng(stockOverviewItem) = CLng(updatedSykCorpAllendaleQty) Then
        
        	actualResult = "Updated SYK Corp Allendale Quantity = " & stockOverviewItem
            valueComparator = 1
            
        Else
        	actualResult = "SYK Corp Allendale Quantity = " & stockOverviewItem
            valueComparator = 0
     	End If
     ElseIf variableName = "Stock Removal Flag" Then
        actualResult = "Stock Removal Flag = " & binStockRemovalFlag
        
        If binStockRemovalFlag = expectedStr Then
            valueComparator = 1
        Else
            valueComparator = 0
        End If
     
    End If
End Function

' From Keshub
Function gettextfromMultiColumnTree(objControl, arrData)
    strValue = arrData(0)
    colNum = arrData(1)
    Set ObjSAPGuiTree = objControl.Object

    'Get the node keys , a key is a number/position in the 
    'A key value starts from 1.
    Set ObjKeyValues = ObjSAPGuiTree.GetAllNodeKeys
    'get the total count
    ''This count indicates the number of items/nodes in the Tree
    intNodeCount = ObjKeyValues.Count 
    
    Set colHeaders = ObjSAPGuiTree.GetColumnHeaders
'    
    intcolHeadersCount = colHeaders.count
	'msgbox intcolHeadersCount
    'Iterate through the nodes of the tree
    For i = 0 to intNodeCount-1
        'Get the node text
        strNodeText=ObjSAPGuiTree.GetNodeTextByKey(ObjKeyValues(i))
        
        If Instr(strNodeText,strValue)>0 Then
'            msgbox strNodeText
'            docOverviewDate = ObjSAPGuiTree.GetItemText(ObjKeyValues(i),colHeaders(1))
'            msgbox docOverviewDate
'            docOverviewStatus = ObjSAPGuiTree.GetItemText(ObjKeyValues(i),colHeaders(2))
'            msgbox docOverviewStatus

			stockOverviewItem = ObjSAPGuiTree.GetItemText(ObjKeyValues(i),colHeaders(colNum))
			msgbox stockOverviewItem
'			For j = 0 To intcolHeadersCount-1
'				key = colHeaders(j).elementAt(cint(j))
'				msgbox key
'		 
'			Next 
			
            Exit For
        End if
    Next
    
End Function

Function updateValue(strValue)

	If (strValue = "Received On Dock") Then
	
		If IsNumeric(stockOverviewItem) Then
        	updatedreceivedOnDockQty = CInt(stockOverviewItem)-1
        	msgbox updatedreceivedOnDockQty
        End If
	
	ElseIf (strValue = "Free Stock") Then
	
		If IsNumeric(stockOverviewItem) Then
        	updatedFreeStockQty = CInt(stockOverviewItem)+1
        	msgbox updatedFreeStockQty
        End If
        
    ElseIf (strValue = "SYK Corp Allendale") Then
	
		If IsNumeric(stockOverviewItem) Then
        	updatedSykCorpAllendaleQty = CLng(stockOverviewItem)-1
        	msgbox updatedSykCorpAllendaleQty
        End If
        
	End If
	
End Function


Function setValueRadio(objControl)

    objControl.Set
    objControl.SetFocus

End Function

Function getBatchesPerMaterial(objControl, strValue) 
	j=0
	SAPTableColName = strValue
	SAPTableRowNum=0
	gridRowCount = objControl.GetROProperty("rowcount")
	msgbox gridRowCount
	
	For i = 1 To  gridRowCount-1
		SAPTableRowNum = i
		ReDim preserve allBatchesArr(j)
		allBatchesArr(j) = objControl.GetCellData(SAPTableRowNum,SAPTableColName)
		msgbox allBatchesArr(j)
		j=j+1
	Next

'	getBatchesPerMaterial = allBatchesArr
	
End Function

Function setValueChangeBatch(objControl, allBatchesArr, batchNo)
	batchFlag = 0
'	batchArr = getBatchesPerMaterial(objControl, strValue)
	batchCount = uBound(allBatchesArr)

	For i = 0 To batchCount
		
		If CLng(batchNo) <> CLng(allBatchesArr(i)) Then
			changeBatchval = allBatchesArr(i)
			msgbox changeBatchval
			batchFlag = 1
			Exit For
		End If
		
	Next
	
	If batchFlag = 1 Then
		arrData(0) = changeBatchval
		Call sendKeys(control_object, arrData)
		
	Else
		msgbox "Batch array does not contain Batch numbers or only contains 1 batch number."
	End If
		
	
End Function







